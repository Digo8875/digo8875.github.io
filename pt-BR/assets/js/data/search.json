[
  
  {
    "title": "Tutorial - Adicionando citação aleatória em post com Jekyll Chirpy",
    "url": "/posts/tutorial-jekyll-chirpy-random-quote-in-post/",
    "categories": "Blog, Tutorial",
    "tags": "tutorial, blog, jekyll, chirpy",
    "date": "2025-01-14 16:00:00 -0300",
    





    
    "snippet": "IntroduçãoEsse artigo é um tutorial que traz uma abordagem para configuração e criação de citações para serem adicionadas em posts.Para o exemplo utilizaremos um código já existente no GitHub para ...",
    "content": "IntroduçãoEsse artigo é um tutorial que traz uma abordagem para configuração e criação de citações para serem adicionadas em posts.Para o exemplo utilizaremos um código já existente no GitHub para continuarmos com a implementação.A ideia é trazer mais personalidade ao nosso blog, através de nossas citações preferidas. Também iremos trabalhar para funcionar com nossa multilinguagem de acordo com o código de blog já existente do tutorial anterior: Tutorial - Criando um blog com Jekyll Chirpy.A Quem é Indicado?  Desenvolvedores que querem ter citações em seu blog com Jekyll ChirpyO ProblemaImplementar uma lógica para adicionar citações aleatórias em nossas postagens a cada deploy do blog, respeitando nosso funcionamento de multi-idiomas.A implementação deverá permitir configurarmos nossa frase, autor e possivelmente uma imagem para a citação.Requisitos  Ferramentas          VSCode      Git      NodeJS      Ruby      Jekyll        O que devo saber?          Conhecimento em VSCode ou uma IDE de sua preferência      Conhecimento em Github      1 - A aplicação utilizada como baseBaixe a aplicação que utilizaremos como base do GitHub, especificamente esta branch 7-github-io;Você pode fazer o clone pelo comando do Git ou baixar o zip e extrair em uma pasta para trabalharmos. Faça conforme desejar;Com a aplicação em mãos, abra com o VSCode ou sua IDE de preferência e vamos trabalhar.2 - A ideiaCerto, vamos pensar no nosso problema e solução.Temos um blog já implementado com multi-idioma e queremos colocar citações aleatórias no final de cada post que fizermos, de acordo com cada idioma.Assim teremos basicamente que implementar:  página com código para exibição da citação, que será incluída no final do nosso post;  estilização do CSS para nossa citação;  sorteio da citação que será exibida;  configuração das citações, de acordo com o idioma e imagem;  pensar em como será nossa padronização de configuração e pastas para imagens;Ideia em mente, vamos fazer nossos ajustes?3 - Vamos implementar!Iniciando com nossa página da montagem da citação no Frontend, crie o arquivo /_includes/random-quote.html:{% assign chosen_quote = site.data.quotes | sample %}{% assign quote_phrase = chosen_quote.[site.default_lang].phrase %}{% assign quote_author = chosen_quote.[site.default_lang].author %}{% assign quote_image = chosen_quote.[site.default_lang].image %}{% assign has_image = true %}{% if chosen_quote.[site.active_lang] != null %}  {% assign quote_phrase = chosen_quote.[site.active_lang].phrase %}  {% assign quote_author = chosen_quote.[site.active_lang].author %}  {% assign quote_image = chosen_quote.[site.active_lang].image %}{% endif %}{% if quote_image == null %}  {% assign has_image = false %}{% endif %}&lt;div class=\"quote-wrapper\"&gt;  {% if has_image %}  &lt;div class=\"quote-phrase-box-with-image rounded-top\"&gt;  {% else %}  &lt;div class=\"quote-phrase-box rounded-top\"&gt;  {% endif %}    {% if has_image %}    &lt;div class=\"quote-phrase-image rounded-top\" style=\"background-image: url('{{ quote_image }}')\"&gt;    &lt;/div&gt;    {% endif %}    &lt;div class=\"quote-phrase-decoration\"&gt;      \"    &lt;/div&gt;    &lt;div class=\"quote-phrase\"&gt;      {{ quote_phrase }}    &lt;/div&gt;  &lt;/div&gt;  {% if quote_image == null %}    &lt;div class=\"quote-division\"&gt;&lt;/div&gt;  {% endif %}  {% if quote_author %}    &lt;div class=\"quote-author\"&gt;      - {{ quote_author }}    &lt;/div&gt;  {% endif %}&lt;/div&gt;Essa é nossa implementação para exibição das citações e como padrão o arquivo ficará na pasta /_includes, pois ele será sempre adicionado em alguma parte de outro arquivo Frontend.Na primeira linha estaremos pegando todas citações da nossa configuração e sorteando uma para ser adicionada ao post.Em seguida, nosso código fará a inicialização de variáveis de acordo com nosso idioma padrão, para depois analisar as configurações para o idioma atual e podermos continuar a lógica.Na DIV quote-wrapper temos a implementação de como queremos a exibição no Frontend e como você pode perceber, temos a utilização de nossas variáveis configuradas para frase, autor e imagem.Com nossa exibição criada, vamos adicionar onde ela será incluída para ser exibida no final de nossas psotagens.Vá no arquivo /_layouts/posts.html e adicione a importação após a exibição do conteúdo do post, ficando assim:&lt;div class=\"content\"&gt;  {{ content }}&lt;/div&gt;{% include random-quote.html %}Agora vamos para a parte de estilização do CSS. Crie o arquivo /_sass/layout/_quote.scss com o conteúdo:@use '../abstracts/variables' as v;@use '../abstracts/mixins' as mx;@use '../abstracts/breakpoints' as bp;@use '../abstracts/placeholders';.quote-wrapper {  @extend %rounded;  background-color: var(--sidebar-bg);  margin-top: 6rem;  border: 1px solid var(--btn-border-color);  .quote-phrase-box-common {    align-content: center;    position: relative;  }  .quote-phrase-box {    @extend .quote-phrase-box-common;    min-height: 6em;  }  .quote-phrase-box-with-image {    @extend .quote-phrase-box-common;    min-height: 12em;    border-bottom: 1px solid var(--btn-border-color);  }  .quote-phrase-image {    width: 100%;    height: 100%;    min-height: 12em;    top: 0;    position: absolute;    background-position: center;    background-repeat: no-repeat;    background-size: cover;    opacity: 0.35;  }  .quote-phrase-decoration {    font-family:Georgia, \"Times New Roman\", Times, serif;    font-weight: bold;    position: absolute;    top: -0.3em;    left: 0.15em;    font-size: 4em;  }  .quote-phrase {    margin: 0 3em 0 3em;    text-align: center;    font-size: 1.2em;    font-weight: bold;    text-shadow: 2px 1px 1px var(--quote-text-shadow);  }  .quote-division {    width: 66.66%;    margin: 0 auto 0 auto;    border-bottom: 2px solid var(--sidebar-border-color);  }  .quote-author {    margin: 0 3em 0.1em 3em;    text-align: end;    font-size: 1.08em;    font-weight: bold;    text-shadow: 2px 1px 1px var(--quote-text-shadow);  }}Como criamos um novo arquivo de estilo, precisaremos ajustar para que ele seja adicionado junto aos outros arquivos SASS quando a aplicação for compilada.Vá no arquivo /_sass/layout/_index.scss e adicione a importação do nosso novo arquivo, ficando assim:@forward 'sidebar';@forward 'topbar';@forward 'panel';@forward 'footer';@forward 'quote';Vamos ajustar agora a estilização para os temas light e dark da aplicação.No arquivo /_sass/themes/_light.scss adicione a configuração de variável:/* Quotes */--quote-text-shadow: rgb(175, 176, 177);Faça o mesmo para o tema dark no arquivo /_sass/themes/_dark.scss e sua variável:/* Quotes */--quote-text-shadow: #151515;Essa é a estilização que implementei, fique a vontade para estilizar conforme você desejar depois e também alterar mais variáveis para seus temas light e dark.Seguindo com a implementação, vamos agora para nossa configuração das frases. Geralmente nossos arquivos de dados ficam na pasta /_data, então vamos seguir a padronização.Crie o arquivo /_data/quotes.yml assim:- en:    phrase: My phrase 1 in EN    author: Rodrigo 1    image: /assets/img/quotes/rodrigo--my_phrase_1.png  pt-BR:    phrase: Minha frase 1 em pt-BR    author: Rodrigo 1    image: /assets/img/quotes/rodrigo--my_phrase_1.png- en:    phrase: Phrase 2      &lt;br&gt; only EN language      &lt;br&gt; no image    author: Rodrigo 2Como você pode perceber no nosso arquivos de configuração, conseguimos:  criar citações com vários idiomas ou apenas o idioma padrão;  colocar ou não imagem na citação;  utilizar tags HTML para colocar a citação em várias linhas;Agora falta apenas nossa imagem de exibição, correto?Copiei a imagem do nosso avatar como exemplo, de /assets/img/site para nossa nova pasta de citações /assets/img/quotes/rodrigo–my_phrase_1.pngEscolhi seguir um padrão para minhas imagens como: author–title_phrase, fique a vontade para seguir sua padronização, pois as imagens de cada post estarão na sua configuração em /_data/quotes.ymlVamos testar?Rode a aplicação com bundle exec jekyll s e acesse algum post.Lembrando que as frases serão aleatórias e montadas quando a aplicação for compilada, então para ver as frases mudando será necessário trocar algo no código para o servidor reiniciar ou parar e iniciar a aplicação novamente.Como exemplos, temos nossas frases:Exemplo citação no idioma EN; sem imagem; tema lightExemplo citação no idioma pt-BR; com imagem; tema darkExemplo citação no idioma EN; com imagem; tema lightExemplo citação no idioma pt-BR, porém com padrão EN por não existir a citação no pt-BR; sem imagem; tema lightFinalizaçãoAgora temos uma maneira de tornar nosso blog mais personalizado, com nossas citações favoritas adicionadas em nossas postagens.Lembre-se que essa é apenas uma maneira de personalizar nosso blog. Sinta-se livre para realizar modificações e melhorias conforme desejar.Até a próxima!"
  },
  
  {
    "title": "Tutorial - Criando um blog com Jekyll Chirpy",
    "url": "/posts/tutorial-jekyll-chirpy-blog/",
    "categories": "Blog, Tutorial",
    "tags": "tutorial, blog, jekyll, chirpy",
    "date": "2025-01-01 13:00:00 -0300",
    





    
    "snippet": "IntroduçãoEsse artigo é um tutorial que exemplifica uma abordagem para criação de blog e geração de seus arquivos para deploy.A ideia é implementarmos um blog que permita posts em vários idiomas, u...",
    "content": "IntroduçãoEsse artigo é um tutorial que exemplifica uma abordagem para criação de blog e geração de seus arquivos para deploy.A ideia é implementarmos um blog que permita posts em vários idiomas, utilizando Jekyll com tema Chirpy, sem sabermos implementação de script do GitHub Pages.Para a parte de arquivos teremos a divisão entre repositórios distintos, de desenvolvimento e deploy, permitindo que também possamos fazer o deploy do blog em outras ferramentas ou customizar o funcionamento do nosso GitHub IO.Para o exemplo utilizaremos o GitHub e faremos o deploy manualmente.A Quem é Indicado?  Desenvolvedores que querem ter um blog aberto gratuitamente ao público  Desenvolvedores que não possuem conhecimento de script do githubpagesRequisitos  Ferramentas          VSCode      Git      NodeJS      Ruby      Jekyll        O que devo saber?          Conhecimento em VSCode ou uma IDE de sua preferência      Conhecimento em Github      Conhecimento para editar seus posts - Markdown, HTML, CSS      Mão na massa!1 - Criando nosso repositórioCrie um repositório para nosso código no GitHub. No meu caso utilizei jekyll-chirpy-multilang-blog.Baixe o repo em uma pasta de sua preferência para podermos iniciar o desenvolvimento do blog.2 - Baixando o Jekyll com tema do ChirpyAqui iremos baixar o Chirpy, que é um tema e implementação de blog com Jekyll.Iremos baixá-lo manualmente e ajustar para nosso repo, para podermos modificá-lo conforme desejado e torná-lo multilinguagem.Para o tutorial iremos utilizar o Chirpy - 7.2.4.Caso deseje outra versão, navegue pelas TAGs e escolha a de sua preferência.Extraia o zip da versão baixada;Agora temos uma pasta jekyll-theme-chirpy-7.2.4, entre nela;Remova a pasta .github, não iremos utilizar as automações de scripts;Transfira todos arquivos da pasta jekyll-theme-chirpy-7.2.4 para nossa pasta do repo de desenvolvimento jekyll-chirpy-multilang-blog;Abra a pasta jekyll-chirpy-multilang-blog no VSCode para começarmos a trabalhar;Ok, até aqui temos os arquivos iniciais, conforme a branch: 1-chirpy-7.2.43 - Ajustando a aplicaçãoAbra o arquivo /Gemfile e adicione a dependência do Polygot:gem \"jekyll-polyglot\"Abra o arquivo /_config.yml, adicione o Polygot e a configuração:plugins:  - jekyll-polyglot# polyglot configurationlanguages: [\"en\", \"pt-BR\"]default_lang: \"en\"exclude_from_localization: [\"javascript\", \"images\", \"assets\", \"public\"]parallel_localization: falseNote que estamos criando a aplicação apenas para os idiomas en e pt-BR, tendo como padrão o idioma en.Ajuste seus idiomas conforme desejar.Abra o terminal na pasta da aplicação (/jekyll-chirpy-multilang-blog) e instale as dependências:bundle installPara não termos problema na hora de compilar o projeto, iremos realizar ajustes nas configurações. Será necessário comentar/remover algumas linhas do arquivo /_config.yml/_config.yml atual:exclude:  - \"*.gem\"  - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  - rollup.config.js  - \"package*.json\"/_config.yml ajustado:exclude:  # - \"*.gem\"  # - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  # - rollup.config.js  # - \"package*.json\"Apenas para testar o build, execute no terminal: bundle exec jekyll build;O projeto deve ter sido compilado sem gerar problemas no terminal;Vamos testar se nossa aplicação está rodando corretamente até o momento?Atente-se que ela ainda não possuirá a seleção de idiomas!Execute no terminal os comandos:npm installnpm run buildbundle installbundle updatebundle exec jekyll buildbundle exec jekyll sCom os comandos iremos:Instalar dependências do Node;Buildar as dependências do Node e arquivos JS da aplicação;Instalar dependências do bundle;Atualizar dependências do bundle;Buildar o Jekyll e arquivos da aplicação;Rodar nosso servidor local do Jekyll;Com o servidor do Jekyll funcionando, acesse a aplicação em localhost:4000. Devemos ter o blog inicial funcionando:Exemplo inicial do blog4 - Ajustando a seleção de idiomaAgora iremos fazer nossa seleção de idiomas no menu lateral e suas configurações para a aplicação.Primeiro, troque a variável de língua utilizada do Jekyll para a do Polyglot:  Utilize o “search and replace” do VSCode para alterar a variável em TODOS OS ARQUIVOS da aplicação;  Altere a variável de site.lang para site.active_lang;Substituição de variáveis pelo VSCodeBaixe as imagens de bandeiras de sua preferência para utilizar na aplicação.Utilizei estas bandeiras, específicamente as da pasta ‘4x3’ por serem retangulares.As imagens das bandeiras deverão ficar na pasta da aplicação: /assets/img/flags;Atente-se que as minhas são em svg, então se você utilizar outro formato de imagem deverá trocar depois na utilização delas pela aplicação;Portanto, utilizarei como exemplo:  /assets/img/flags/us.svg  /assets/img/flags/br.svgCom nossas imagens ajustadas, podemos criar nosso seletor de idiomas no menu lateral do blog. Vamos lá!No arquivo /_includes/sidebar.html, iremos criar o menu de idiomas no html. Note que adicionei dentro da div &lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;, logo no início para ficar antes dos links sociais, pois é onde desejo na minha aplicação. Fique livre para estilizar e adicionar como desejar.Código da alteração do menu de idiomas:&lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;  &lt;!-- jekyll-polyglot will process ferh= into href= through the static_href liquid block tag without relativizing the url; useful for making language navigation switchers  --&gt;  &lt;div class=\"lang-div d-flex flex-column w-100\"&gt;    &lt;p style=\"font-weight: bold;\" id=\"language\"&gt;      {{ site.data.locales[site.active_lang].lang_config.languages }}    &lt;/p&gt;    {% for tongue in site.languages %}      &lt;p class=\"lang-name-box\"&gt;        {% if tongue == site.active_lang %}          &lt;a class=\"lang-name\" id=\"current-lang\" style=\"font-weight: bold;\"&gt;            &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;            &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;          &lt;/a&gt;        {% else %}          {% if page.lang-exclusive %}            {% assign is_lang_exclusive = false %}            {% for lang in page.lang-exclusive %}              {% if tongue == lang %}                {% assign is_lang_exclusive = true %}                &lt;span&gt;This language is in the lang_ex list&lt;/span&gt;              {% endif %}            {% endfor %}            {% if is_lang_exclusive == false %}              &lt;a class=\"lang-name disabled-lang\"&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% endif %}          {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;          {% endif %}        {% endif %}      &lt;/p&gt;    {% endfor %}  &lt;/div&gt;  &lt;!-- Existing sidebar-bottom code below --&gt;  &lt;!-- (...) --&gt;&lt;/div&gt;Temos nosso visual montado, mas você percebeu que possuímos diversas variáveis sendo utilizadas no código html. Então agora precisamos configurar essas variáveis para exibição da tradução.No arquivo /_data/locales/en.yml, adicione as traduções e configurações correspondentes ao idioma:# The languages of sidebarsite_languages:  en: English  pt-BR: Portuguese# The lang configlang_config:  languages: Languages  flag: usNo arquivo /_data/locales/pt-BR.yml, adicione as traduções e configurações correspondentes ao idioma:# The languages of sidebarsite_languages:  en: Inglês  pt-BR: Português# The lang configlang_config:  languages: Idiomas  flag: brVocê deverá fazer isso para cada idioma que adicionou nas suas configurações do arquivo /_config.yml, lembra?# ...# polyglot configurationlanguages: [\"en\", \"pt-BR\"]# ...Agora temos que ajustar nossa estilização no CSS. Altere o arquivo /sass/layout/sidebar.scss, adicionando o código dentro do .sidebar-bottom:.sidebar-bottom {  // (...)  // Existing sidebar-bottom code above  .lang-name-box {    font-family: 'NotoColorEmojiLimited', -apple-system, BlinkMacSystemFont,      'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji',      'Segoe UI Emoji', 'Segoe UI Symbol';    margin: 0.1rem;    margin-bottom: 0.15rem;    .lang-name {      padding: 1.2rem;      border: 1px solid transparent;      border-radius: 0.75rem;      width: 90%;      text-align: left;      font-size: 0.9rem;      margin-bottom: 0.1rem;      justify-content: left;      color: var(--sidebar-active-color);      background-color: var(--sidebar-bg);      opacity: 0.8;      &amp;:hover {        background-color: var(--sidebar-hover-bg);      }    }    .lang-flag {      width: 15%;      margin-right: 0.75rem;      border-radius: 0.15rem;      box-shadow: 2px 1.5px 5px #000000AA;    }    span {      font-size: 90%;      letter-spacing: 0.2px;    }    .disabled-lang {      background-color: var(--sidebar-disabled-color);      color: #ff0000;      &amp;:hover {        background-color: #ffe3e5;      }    }    #current-lang {      background-color: var(--sidebar-hover-bg);      opacity: 1;    }  }  .lang-div {    margin-bottom: 1.2rem;    padding: 0;  }  #language {    font-size: 1.1rem;    margin-bottom: 0.3rem;  }} /* .sidebar-bottom */Tudo ajustado, vamos testar nossa aplicação: bundle exec jekyll sNesse ponto nossa aplicação deverá se encontrar com o menu lateral dessa maneira:Exemplo do blog com seleção de idioma no menu lateralAssim, ao trocar de idioma você perceberá a troca de algumas informações do site.Ok, até aqui temos a aplicação conforme a branch: 2-sidebar-lang-menu5 - Ajustando a página ‘About’Essa página é um pouco diferente em sua implementação, então iremos adaptar para nossa tradução de idiomas.A ideia será filtrarmos o idioma e exibir a página correta, que poderá ser markdown ou html conforme configurarmos.Primeiro, vamos alterar o arquivo /_tabs/about.md e deixá-lo assim:---icon: fas fa-info-circleorder: 4---&lt;!-- The file type (.md or .html) of about-content --&gt;{% assign file_type = '.md' %}{% assign path_prefix = '' %}{% assign file_name = 'about-content' %}{% if site.active_lang == site.default_lang %}  {% assign path_prefix = '' %}{% else %}  {% assign path_prefix = '' | append: site.active_lang | append: '/' %}{% endif %}{% assign about_content_path = '' | append: path_prefix | append: file_name | append: file_type %}{% include {{ about_content_path }} %}Dessa maneira, conseguimos configurar qual o tipo de arquivo desejamos utilizar para o conteúdo da página about (.md ou .html) e nossa lógica fará a mágica para decidir qual apresentar ao usuário, tanto pelo tipo do arquivo quanto pelo idioma.Agora precisamos criar nossos arquivos de conteúdo da página about. Utilizaremos a abordagem de deixar os arquivos do idioma en como padrão e os arquivos pr-BR em sua respectiva pasta, sempre com a mesma nomenclatura.Dessa maneira, teremos que criar os arquivos na pasta /_includes assim:  /_includes          about-content.html      about-content.md      /pt-BR                  about-content.html          about-content.md                    Confira o conteúdo de cada arquivo criado:{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    en  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }en{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/pt-BR/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    pt-BR  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/pt-BR/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }pt-BROk, até aqui temos a aplicação conforme a branch: 3-refactor-about-page-logic6 - Trabalhando com posts em multilinguasNossos posts sempre ficarão na pasta /_posts.Já que escolhemos o idioma en como padrão, os arquivos referentes a ele sempre estarão nas pastas raízes de cada módulo da aplicação.Assim, os outros posts de traduções deverão seguir a padronização e estarem em suas respectivas pastas.Vamos fazer um exemplo com o getting-started do próprio Chirpy.No arquivo /_posts/2019-08-09-getting-started.md, adicione a configuração de lang (pode ser após o título), ficando com as configurações assim:---title: Getting Startedlang: endescription: &gt;-  Get started with Chirpy basics in this comprehensive overview.  You will learn how to install, configure, and use your first Chirpy-based website, as well as deploy it to a web server.author: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---Dessa maneira nosso post está configurado para o idioma en.Agora vamos fazer nossa tradução pt-BR. Criamos a pasta /_posts/pt-BR, que irá armazenar todos nossos posts do idioma.Copie o arquivo correspondente ao idioma en para a pasta pt-BR e configure a lang do novo post. Também vamos alterar o conteúdo do novo post para sabermos que tem algo mudando conforme selecionamos os idiomas.Então nosso post getting-started em pt-BR ficará assim:---title: Getting Startedlang: pt-BRdescription: &gt;-  Aqui temos nossa descrição em pt-BRauthor: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---## Creating a Site RepositoryNosso POST em pt-BR !!!Vamos testar. Lembrando de rodar a aplicação com bundle exec jekyll s e acessando em localhost:4000.Acesse a página HOME e já teremos a exibição dos posts getting-started em ambos idiomas.Acesse o post do getting-started e troque de idioma.Agora o conteúdo do nosso post já está alterando de acordo com nossa seleção de idioma.7 - Filtrando a exibição dos posts na página ‘Home’ por idiomaOk, temos até o momento uma aplicação que permite tradução das páginas about e posts. Porém, na página home ainda temos a exibição de todos posts independente do idioma selecionado.Aqui temos 2 opções:  Iremos trabalhar SEMPRE criando cada post em TODOS OS IDIOMAS;  Iremos possuir post que não existirão para todos idiomas e precisaremos filtrar a exibição;Se seguir na primeira opção, não precisa fazer mais nada. Apenas delete tudo da pasta /_posts e inicie sua escrita, sempre seguindo a padronização de pastas dos posts e idiomas.Como quero um pouco mais de diversão, vamos seguir com a segunda opção.Vamos ajustar a lógica no arquivo /_layouts/home.html:Adicione o código antes da listagem dos posts na página home, especificamente antes da div &lt;div id=\"post-list\" class=\"flex-grow-1 px-xl-1\"&gt;&lt;!-- Filter the posts by ACTIVE LANGUAGE --&gt;{% assign filtered_posts = '' | split: '' %}{% for post in posts %}  {% if post.lang == site.active_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% elsif post.lang == null and site.active_lang == site.default_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% endif %}{% endfor %}{% assign posts = filtered_posts %}A ideia é que como o chirpy já faz a listagem de TODOS POSTS da aplicação, verificando quais são fixados ou não, nós não iremos mudar toda sua lógica. Assim, vamos apenas pegar essa lista do Chirpy e filtrar novamente com base no nosso idioma selecionado.Para essa filtragem é checado aquela configuração que colocamos no post getting-started chamada de lang.Também lembramos que temos nosso idioma padrão, então todos posts que NÃO TIVEREM a configuração da lang serão colocados na listagem do idioma padrão.Agora testando nossa aplicação novamente, na página HOME, conforme selecionamos o idioma temos a exibição dos posts correspondentes.Ok, até aqui temos a aplicação conforme a branch: 4-home-filter-posts-by-language8 - Ajustando nosso diretório de imagensAgora vamos para nossas imagens e assets.As imagens de base são utilizadas do CDN do Chirpy, então para utilizar nossas próprias imagens nos posts e site devemos ajustar para nossos arquivos locais da aplicação.   Podemos também configurar um link para nosso CDN externo ou nosso próprio domínio da aplicação, porém iremos fazer com arquivos nas pastas da própria aplicação.Note que em localhost funciona normalmente e conseguimos também utilizar links de imagens do nosso assets sem problema, isso devido ao nosso comando bundle exec jekyll s criar um servidor e configurar automaticamente nosso domínio como localhost:4000. Porém, quando subirmos para o GitHub irá dar problema pois o build da aplicação não conterá o domínio do localhost.Como iremos retirar o CDN do Chirpy das configurações, as imagens da aplicação irão ficar com problema de exibição até configurarmos corretamente.Para os posts eu utilizaria a ideia padronizada, por exemplo: /assets/img/posts/NOME_DO_POST e assim manteria o padrão de idiomas, com o en na raíz e cada imagem que fosse necessária traduzir nas respectivas pastas de idiomas.Para as imagens que utilizar na aplicação como um todo, utilizaria a pasta: /assets/img/site.Assim, vamos começar nossas mudanças. Crie as pastas:  /assets          /img                  /posts          /site                    Vamos ajustar nosso avatar. Copie alguma imagem e salve na pasta /assets/img/site.Eu fiz com a imagem do Chirpy e com o nome padrão avatar.png, para ser possível trocar depois.Utilizei a imagem /assets/img/favicons/android-chrome-512x512.png e salvei como /assets/img/site/avatar.pngAgora vamos ajustar as configurações em /_config.yml:# The CDN endpoint for media resources.# Notice that once it is assigned, the CDN url# will be added to all media resources (site avatar, posts' images, audio and video files) paths starting with '/'## e.g. 'https://cdn.com'cdn: \"\"# the avatar on sidebar, support local or CORS resourcesavatar: \"/assets/img/site/avatar.png\"Remova o CDN, assim utilizaremos imagens da própria aplicação;Ajuste o AVATAR, conforme criamos a imagem;Para testarmos, se a aplicação estiver rodando, pare e reinicie para ela carregar a nova imagem do avatar: bundle exec jekyll sAgora temos nossa imagem de avatar normalmente, mas pegando nos arquivos locais da aplicação.Note que a imagem do post Text and Typography não é mais acessível, justamente por termos retirado a configuração do CDN.Vamos fazer um exemplo de como adicionar a imagem no post?Irei utilizar a própria imagem do avatar, mas seguindo nossa padronização de pastas. Copie ela para: /assets/img/posts/2019-08-08-text-and-typography/post-cover.png, lembrando que caso ela precise de uma imagem traduzida para o pt-BR também deverá criar outra imagem /assets/img/posts/2019-08-08-text-and-typography/pt-BR/post-cover.png.Estou utilizando essa nomenclatura pois assim seguimos o padrão de que todo post que tenha imagem de capa terá uma imagem post-cover.png e depois as demais imagens do post para utilizarmos na escrita como desejarmos.Vamos ajustar a configuração da imagem no post:---title: Text and Typographylang: endescription: Examples of text, typography, math equations, diagrams, flowcharts, pictures, videos, and more.author: cotesdate: 2019-08-08 11:33:00 +0800categories: [Blogging, Demo]tags: [typography]pin: truemath: truemermaid: truemedia_subpath: '/assets/img/posts/2019-08-08-text-and-typography'image:  path: /post-cover.png  alt: The Post Cover Image---Note que configuramos o path como nome da imagem mas também temos uma configuração de media_subpath, assim todas imagens utilizadas no post já irão possuir esse prefixo do caminho para utilizarmos as imagens de dentro da pasta de imagens do post.Atente-se para a lang do post, pois para imagens traduzidas de cada idioma teremos o caminho correspondente.Para testarmos vamos novamente reiniciar a aplicação.Pronto, agora temos nossa imagem de capa no post pegando dos nossos arquivos locais.Ok, até aqui temos a aplicação conforme a branch: 5-assets-in-local-folders9 - Ajustando tradução de título e subtítuloVamos permitir também que a seleção de idiomas altere as informações abaixo de nosso avatar.Altere no arquivo _config.yml as configurações de title, tagline e description, seguindo a mesma padronização de idiomas para permitir a tradução das informações:# the main titletitle:  en: Chirpy EN  pt-BR: Chirpy pt-BR# it will display as the subtitletagline:  en: A text-focused Jekyll theme  pt-BR: Um tema Jekyll focado em texto# used by seo meta and the atom feeddescription:  en: A minimal, responsive and feature-rich Jekyll theme for technical writing.  pt-BR: Um tema Jekyll mínimo, responsivo e rico em recursos para redação técnica.Agora faça a substituição das variáveis de toda a aplicação, pelo replace do VSCode, para utilizar as novas variáveis de idioma:  Altere site.title para site.title[site.active_lang]  Altere site.tagline para site.tagline[site.active_lang]  Altere site.description para site.description[site.active_lang]Ok, até aqui temos a aplicação conforme a branch: 6-title-languages10 - Informações adicionais de configuraçãoVocê deve ter notado que nosso arquivo /_config.yml possui diversas outras configurações que não alteramos.Acredito que dando uma lida no arquivo as informações do Jekyll sejam claras, então basta ir ajustando conforme suas informações pessoais e redes sociais para que seu blog fique completo.Também temos configurações para você poder utilizar nos seus posts, como o autor, encontrada em /_data/authors.yml e acessível pelo tutorial Chirpy - Author Information.Como a ideia deste tutorial é focar na abordagem de multilinguagem do blog, deixo com você a documentação do próprio Chirpy para que você possa aprender mais sobre a ferramenta e implementar seu blog: https://chirpy.cotes.page/. Como você pode ver na documentação do Chirpy, você ainda pode ajustar diversas coisas em seus posts, como imagens, vídeos, áudios, diagramas, etc.Também temos a documentação do Jekyll para você consultar: https://jekyllrb.com/docs/.11 - Criando nosso repositório de deployAplicação implementada, vamos agora colocar para rodar no Github.Crie um repositório para deploy do blog. Esse repositório deverá ser seu nome de usuário para que o github permita hospedar seu blog estático, seguindo o padrão: USERNAME.github.io. No meu caso ficou digo8875.github.ioClone o repo para sua pasta de trabalho.Voltamos ao nosso arquivo /_config.yml para ajustarmos nosso domínio da aplicação.Adicione seu username na configuração de url:# Fill in the protocol &amp; hostname for your site.# E.g. 'https://username.github.io', note that it does not end with a '/'.url: \"https://digo8875.github.io/\"Agora vamos buildar o blog e fazer o deploy.Na pasta do blog, no terminal, execute os comandos:npm run buildbundle exec jekyll buildAgora temos os arquivos JS e CSS buildados pelo Node e as páginas do blog buildadas pelo Jekyll, tudo na pasta /_site.Copie o conteúdo da pasta /_site para seu repo de deploy e realize o commit para subir os arquivos no Github.Se você for no Github e acompanhar o repositório, verá que automaticamente uma ação do Github Pages será colocada na fila e executada.Após funcionar essa ação do Github, seu blog estará com as informações atualizadas e o deploy estará feito.Conforme podemos observar na imagem, nos retângulo em laranja houve a execução do Github Pages:Repositório no GitHub com arquivos de deploy do blog e ação do GitHub Pages executadaPara acessarmos nosso blog, basta colocarmos no navegador: USERNAME.github.io, onde o meu é digo8875.github.ioOk, até aqui temos a aplicação conforme a branch: 7-github-ioFinalizaçãoAgora temos uma abordagem para criarmos um blog e começarmos a dividir nossas ideias e ensinamentos.Agradeço o tempo que passamos juntos, espero que tenha gostado da nossa diversão e que assim possa contribuir com seus conhecimentos e experiências para outras pessoas.Lembre-se que essa é uma das várias maneiras de implementarmos um blog. Sinta-se livre para realizar modificações e melhorias conforme desejar ao seu blog.Até a próxima!Links  Documentações          Jekyll      Chirpy      Chirpy - 7.2.4      Polyglot      Liquid      Markdown        Tutoriais Consultados e Links Úteis          Tutorial - Plyglot      Tutorial - Jekyll Blog Workflow      Tutorial - Chirpy Polyglot      Tutorial - Jekyll Deploy      Tutorial - Jekyll e Github Pages      Assets - Flags      "
  }
  
]

