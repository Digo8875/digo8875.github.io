[
  
  {
    "title": "Tutorial - Creating a blog with Jekyll Chirpy",
    "url": "/posts/tutorial-jekyll-chirpy-blog/",
    "categories": "Blog, Tutorial",
    "tags": "tutorial, blog, jekyll, chirpy",
    "date": "2025-01-01 13:00:00 -0300",
    





    
    "snippet": "IntroductionThis article is a tutorial that exemplifies an approach to creating a blog and generating its files for deployment.The ideia is to implement a blog that allows posts in multiple languag...",
    "content": "IntroductionThis article is a tutorial that exemplifies an approach to creating a blog and generating its files for deployment.The ideia is to implement a blog that allows posts in multiple languages, using Jekyll with Chirpy theme, without knowing how to implement a GitHub Pages script.For the files section, we will divide in some repositories, like development and deploy, allowing us to also deploy the blog in other tools or customize our GitHub IO.For the example we will use the GitHub and do the deployment manually.Who is it for?  Developers who want to have a blog open to the public for free  Developers who don’t have knowledge of GitHub PAges scriptRequirements  Tools          VSCode      Git      NodeJS      Ruby      Jekyll        What should i know?          Knowledge of VSCode or an IDE of your choice      Knowledge of GitHub      Knowledge to edit your posts - Markdown, HTML, CSS      Hands-on!1 - Creating our repositoryCreate a repository to our code on GitHub. In my case, i used jekyll-chirpy-multilang-blog.Downsload the repo to a folder of your choice, so we can start developing the blog.2 - Download the Jekyll with Chirpy themeHere we will download Chirpy, which is a Jekyll theme and blog implementation.We will manualy download it and adjust for our repo, so we can modify it by our choice and turn it multilingual.For this tutorial, we will use the Chirpy - 7.2.4.If you want to use another version, browse the TAGs and choose what you like.Extract the zip file of the downloaded version;Now we have a folder jekyll-theme-chirpy-7.2.4, enter it;Remove the .github folder, we will not use script automations;Transfer all files from the jekyll-theme-chirpy-7.2.4 folder to our development repo folder jekyll-chirpy-multilang-blog;Open the jekyll-chirpy-multilang-blog folder in VSCode to we begin our work;Ok, so far we have the initial files like the branch: 1-chirpy-7.2.43 - Adjusting the applicationOpen the file /Gemfile and add the Polyglot dependency:gem \"jekyll-polyglot\"Open the file /_config.yml, add the Polyglot plugin and the configuration:plugins:  - jekyll-polyglot# polyglot configurationlanguages: [\"en\", \"pt-BR\"]default_lang: \"en\"exclude_from_localization: [\"javascript\", \"images\", \"assets\", \"public\"]parallel_localization: falseNote that we are creating the application only for the en and pt-BR languages, with the en language as the default.Adjust your languages as you wish.Open the terminal in the application folder (/jekyll-chirpy-multilang-blog) and install the dependencies:bundle installTo avoid problems when compilling the project, we will make changes in the configurations. We need to comment/remove some code lines in /_config.yml file.Actual /_config.yml file:exclude:  - \"*.gem\"  - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  - rollup.config.js  - \"package*.json\"Adjusted /_config.yml file:exclude:  # - \"*.gem\"  # - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  # - rollup.config.js  # - \"package*.json\"Only to test the build process, execute the command in terminal: bundle exec jekyll build;The project must be compiled with no problem generated in the terminal;Let’s test if our application is running correctly so far?Note that it will not yet have the language selection!Execute the commands below in the terminal:npm installnpm run buildbundle installbundle updatebundle exec jekyll buildbundle exec jekyll sThe commands execution will:Install the Node dependencies;Build the Node dependencies and JS files for the application;Install the bundle dependencies;Update the bundle dependencies;Build the Jekyll and application files;Run our Jekyll local server;With the Jekyll server running, access the application in localhost:4000. We should have the initial blog running:Example of the initial blog4 - Adjusting the language selectionNow we will implement our language selection in the side menu with the configurations for the application.First, change the language variable used by Jekyll to the Polyglot:  Use the “search and replace” in VSCode to change the variable in ALL FILES of the application;  Change the variable from site.lang to site.active_lang;Replacing variables with VSCodeDownload the flag images from your choice to use in the application.I used these flags, especifically hte ones in ‘4x3’ folder because they are rectangular.The flag images should be in the application folder: /assets/img/flags;Note that my images are in svg extension, so if you use another image format you will need to adjust it when using them in the application;So i will use these for my example:  /assets/img/flags/us.svg  /assets/img/flags/br.svgWith our images adjusted, we can create the language selector in the blog’s side menu. Let’s go!In the /_includes/sidebar.html file, we will create the language menu in html. Note that i added it inside the div &lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;, right at the beginning to be before the display of the social links, as that is where i want it in my application. Feel free to style and add as you wish.The code of the language menu alteration:&lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;  &lt;!-- jekyll-polyglot will process ferh= into href= through the static_href liquid block tag without relativizing the url; useful for making language navigation switchers  --&gt;  &lt;div class=\"lang-div d-flex flex-column w-100\"&gt;    &lt;p style=\"font-weight: bold;\" id=\"language\"&gt;      {{ site.data.locales[site.active_lang].lang_config.languages }}    &lt;/p&gt;    {% for tongue in site.languages %}      &lt;p class=\"lang-name-box\"&gt;        {% if tongue == site.active_lang %}          &lt;a class=\"lang-name\" id=\"current-lang\" style=\"font-weight: bold;\"&gt;            &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;            &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;          &lt;/a&gt;        {% else %}          {% if page.lang-exclusive %}            {% assign is_lang_exclusive = false %}            {% for lang in page.lang-exclusive %}              {% if tongue == lang %}                {% assign is_lang_exclusive = true %}                &lt;span&gt;This language is in the lang_ex list&lt;/span&gt;              {% endif %}            {% endfor %}            {% if is_lang_exclusive == false %}              &lt;a class=\"lang-name disabled-lang\"&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% endif %}          {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;          {% endif %}        {% endif %}      &lt;/p&gt;    {% endfor %}  &lt;/div&gt;  &lt;!-- Existing sidebar-bottom code below --&gt;  &lt;!-- (...) --&gt;&lt;/div&gt;We have the visual implemented, but you noticed that we have many variables being used in the html code. So now we need to configure these variables to display the translation.In the /_data/locales/en.yml file, add the translation and settings correspondding to the language:# The languages of sidebarsite_languages:  en: English  pt-BR: Portuguese# The lang configlang_config:  languages: Languages  flag: usIn the /_data/locales/pt-BR.yml file, add the translation and settings correspondding to the language:# The languages of sidebarsite_languages:  en: Inglês  pt-BR: Português# The lang configlang_config:  languages: Idiomas  flag: brYou will need to do this for each language you added to the /_config.yml file settings, remember?# ...# polyglot configurationlanguages: [\"en\", \"pt-BR\"]# ...Now we need to adjust our styling in CSS. Change the file /sass/layout/sidebar.scss, adding the code inside the .sidebar-bottom:.sidebar-bottom {  // (...)  // Existing sidebar-bottom code above  .lang-name-box {    font-family: 'NotoColorEmojiLimited', -apple-system, BlinkMacSystemFont,      'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji',      'Segoe UI Emoji', 'Segoe UI Symbol';    margin: 0.1rem;    margin-bottom: 0.15rem;    .lang-name {      padding: 1.2rem;      border: 1px solid transparent;      border-radius: 0.75rem;      width: 90%;      text-align: left;      font-size: 0.9rem;      margin-bottom: 0.1rem;      justify-content: left;      color: var(--sidebar-active-color);      background-color: var(--sidebar-bg);      opacity: 0.8;      &amp;:hover {        background-color: var(--sidebar-hover-bg);      }    }    .lang-flag {      width: 15%;      margin-right: 0.75rem;      border-radius: 0.15rem;      box-shadow: 2px 1.5px 5px #000000AA;    }    span {      font-size: 90%;      letter-spacing: 0.2px;    }    .disabled-lang {      background-color: var(--sidebar-disabled-color);      color: #ff0000;      &amp;:hover {        background-color: #ffe3e5;      }    }    #current-lang {      background-color: var(--sidebar-hover-bg);      opacity: 1;    }  }  .lang-div {    margin-bottom: 1.2rem;    padding: 0;  }  #language {    font-size: 1.1rem;    margin-bottom: 0.3rem;  }} /* .sidebar-bottom */Everything implemented, let’s test our application: bundle exec jekyll sAt this point our application should found whith the side menu like this:Example of the blog with language selection in side menuTherefore, when you change the language you will notice that some informations in the blog will change.Ok, so far we have the application like the branch: 2-sidebar-lang-menu5 - Adjusting the ‘About’ pageThis page is a bit different in it implementation, so we need to adapta this to our language translation.The idea will be to filter the language and display the correct page, which could be markdown or html file, depending on what we configure.First, let’s change the file /_tabs/about.md and make it look like this:---icon: fas fa-info-circleorder: 4---&lt;!-- The file type (.md or .html) of about-content --&gt;{% assign file_type = '.md' %}{% assign path_prefix = '' %}{% assign file_name = 'about-content' %}{% if site.active_lang == site.default_lang %}  {% assign path_prefix = '' %}{% else %}  {% assign path_prefix = '' | append: site.active_lang | append: '/' %}{% endif %}{% assign about_content_path = '' | append: path_prefix | append: file_name | append: file_type %}{% include {{ about_content_path }} %}This way, we can configure which type of file we want to use for the content of the about page (.md ou .html) and out logic will make the trick to decide which one to present to the user, checking the file type and the language.Now we need create our about page content files. We willl use the approach of leaving the en language files as default and the pt-BR files in their respective folder, always with the same naming.This way, we will have to create the files in the /_includes folder like this:  /_includes          about-content.html      about-content.md      /pt-BR                  about-content.html          about-content.md                    Check below the content for each created file:{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    en  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }en{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/pt-BR/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    pt-BR  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/pt-BR/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }pt-BROk, so far we have the application like the branch: 3-refactor-about-page-logic6 - Working with multilingual postsOur posts will always be in the /_posts folder.Since we choose the en language as default, the files related to it will always be in the root folders of each application module.Therefore, other translations posts must follow the standardizationg and be in their respective folders.Let’s do an example with the Chirpy’s own getting-started post.In the file /_posts/2019-08-09-getting-started.md, add the lang configuration (it canbe after the title), leaving the settings like this:---title: Getting Startedlang: endescription: &gt;-  Get started with Chirpy basics in this comprehensive overview.  You will learn how to install, configure, and use your first Chirpy-based website, as well as deploy it to a web server.author: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---This way our post is set to the en language.Now let’s make our pt-BR translation. We create the folder /_posts/pt-BR, which will store all posts in this language.Copy the file corresponding to the en language to the pt-BR folder and set a lang of the new post. we will also change the content of the new post so that we know that something in changing as we sleect the languages.So our getting-started post in pt-BR will look like this:---title: Getting Startedlang: pt-BRdescription: &gt;-  Aqui temos nossa descrição em pt-BRauthor: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---## Creating a Site RepositoryNosso POST em pt-BR !!!Let’s test it. Remember to run the application with bundle exec jekyll s and access it at localhost:4000.Access the HOME page and we will already have the getting-started post displayed in both languages.Access the getting-started post and change the language.Now the content of our post will be changing according to our language selection.7 - Filtering the display of posts on the ‘Home’ page by selected languageOk, so far we have an application that allows translation of the about and post pages. However, in the home page we still have the display of all posts regardless of the selected language.Here we have 2 options:  We will work ALWAYS creating each post in ALL LANGUAGES;  We will have posts that will not exist for all languages and we will nedd to filter the display;If you choose the first option, you don’t need to do nothing else. Just delete all post files in the /_posts folder and start writing, always following the standardization of post folders and languages.Since i like a little more fun, let’s go with the second option.Let’s adjust the logic in the /_layouts/home.html file:Add the code before the list of posts on the home page, specifically before the div &lt;div id=\"post-list\" class=\"flex-grow-1 px-xl-1\"&gt;&lt;!-- Filter the posts by ACTIVE LANGUAGE --&gt;{% assign filtered_posts = '' | split: '' %}{% for post in posts %}  {% if post.lang == site.active_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% elsif post.lang == null and site.active_lang == site.default_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% endif %}{% endfor %}{% assign posts = filtered_posts %}The idea is that since Chirpy already list ALL POSTS from the application, checking which one is pinned or not, we won’t change this entire logic. So, we’ll just take this list from Chirpy and filter it again based on our selected language.For this filtering, the lang configuration we put in the getting-started post is checked.We also remember that we have our default language, so all posts that DO NOT HAVE the lang setting will be placed in the default language lsiting.Now testing our application again, on the HOME page, as we select the language we have the correcponding posts displayed.Ok, so far we have the application like the branch: 4-home-filter-posts-by-language8 - Adjusting our images directoryNow let’s adjust our images and assets.The base images are used from the Chirpy’s CND, so to use our own images in posts and website we must adjust them to our application local files.We can also set our own external CDN or our own application domain, but we will do this with files in the application’s own folders.Note that in localhost it works normally and we can also use image links from our assets with any problem, this is because our bundle exec jekyll s command creates a server and automatically configures our domain as localhost:4000. However, when we upload it to GitHub it will cause a problem because the application build will not contain the localhost domain.Due to removing the Chirpy’s CDN from the settings, the application’s images will have display issues until we configure them correctly.For posts, i would use the standardized idea, for example: /assets/img/posts/POST_NAME and thus maintain the language standard, with en in the root and each image that needed to be translated in the respective language folders.For images that you use in the application as a whole, i would use the folder: /assets/img/site.So, let’s start our changes. Create the fodlers like this:  /assets          /img                  /posts          /site                    Let’s adjust our avatar. Copy any image and save it in the /assets/img/site folder.I used the Chirpy image and a defaul name avatar.png, so that i can change it later.I used the image /assets/img/favicons/android-chrome-512x512.png and saved it as /assets/img/site/avatar.png.Now let’s change the settings in /_config.yml file:# The CDN endpoint for media resources.# Notice that once it is assigned, the CDN url# will be added to all media resources (site avatar, posts' images, audio and video files) paths starting with '/'## e.g. 'https://cdn.com'cdn: \"\"# the avatar on sidebar, support local or CORS resourcesavatar: \"/assets/img/site/avatar.png\"Remove the CDN, so we will use the images from application itself;Adjust the AVATAR, as we created the image;To test, if the application is running, stop and restart it loads the new avatar image: bundle exec jekyll sNow our avatar image normally, but taking it from the application’s local files.Note that the post image from the Text and Typography post is no longer accessible, precisely because we removed the CDN setting.Let’s make an example of how add the image to the post?I will use the avatar image itself, but following our folder standardization. Copy the image to /assets/img/posts/2019-08-08-text-and-typography/post-cover.png, remembering that if it needs an image translated to pt-BR you will also need to create another image /assets/img/posts/2019-08-08-text-and-typography/pt-BR/post-cover.png.I’m using this nomenclature because this way we follow the standard that every post that has a cover image will have a post-cover.png image and then the other images of the post for us to use is the writing as we hish.Lets’ adjust the image configuration on the post:---title: Text and Typographylang: endescription: Examples of text, typography, math equations, diagrams, flowcharts, pictures, videos, and more.author: cotesdate: 2019-08-08 11:33:00 +0800categories: [Blogging, Demo]tags: [typography]pin: truemath: truemermaid: truemedia_subpath: '/assets/img/posts/2019-08-08-text-and-typography'image:  path: /post-cover.png  alt: The Post Cover Image---Note that we set the path as the image name but we also have a media_subpath configuration, so all images used in the post will already have this path prefix so we can use the imagens from the post’s image folder.Pay attention to the lang of the post, because for iamges translated from each language we will have the corresponding path.To test, let’s restart the application again.Done, now we ahve our cover image in the post taken from our local files.Ok, so far we have the application like the branch: 5-assets-in-local-folders9 - Adjusting title and subtitle translationWe will also allow the language selection to change the informations below our avatar.Change the title, tagline and description settings in the _config.yml file, following the same language standardization to allow the translation of informations:# the main titletitle:  en: Chirpy EN  pt-BR: Chirpy pt-BR# it will display as the subtitletagline:  en: A text-focused Jekyll theme  pt-BR: Um tema Jekyll focado em texto# used by seo meta and the atom feeddescription:  en: A minimal, responsive and feature-rich Jekyll theme for technical writing.  pt-BR: Um tema Jekyll mínimo, responsivo e rico em recursos para redação técnica.Now replace the variables of the entire application, with VSCode’s replace, to use the new language variables:  Change from site.title to site.title[site.active_lang]  Change from site.tagline to site.tagline[site.active_lang]  Change from site.description to site.description[site.active_lang]Ok, so far we have the application like the branch: 6-title-languages10 - Additional configuration informationYou may have noticed that our /_config.yml file has several other settings that we did not change.I believe that reading the file will make the Jekyll information clear, so just adjust it according to your personal and social informations so that your blog is complete.We also have settings that you can use in your posts, such as the author, found in /_data/authors.yml and accessible through the tutorial Chirpy - Author Information.Since the idea of this tutorial is to focus on the multilingual approach to blogging, i leave you with the Chispy’s documentation so that you can learn more about the tool and improve your blog: https://chirpy.cotes.page/. As you can see in the Chirpy’s documentation, you can also adjust several things in your posts, such as imagens, videos, songs, diagrams, etc.We also have the Jekyll’s documentation for you to check: https://jekyllrb.com/docs/.11 - Creating our deploy repositoryApplication implemented, now let’s put it to run on GitHub.Create a repository to the blog’s deploy. These repository must be your username, so the GitHub allows you to host your static blog, following the pattern: USERNAME.github.io. In my case it was digo8875.github.ioClone the repo to your working folder.Open our /_config.yml file to adjust our application domain.Set your username in the url setting:# Fill in the protocol &amp; hostname for your site.# E.g. 'https://username.github.io', note that it does not end with a '/'.url: \"https://digo8875.github.io/\"Now we need to build the blog and make the deploy.In the blog folder, in the terminal, run the commands:npm run buildbundle exec jekyll buildNow we have the JS and CSS files built by NodeJS and the blog pages built by Jekyll, all files in the /_site folder.Copy the contents of the /_site folder to your deployment repository and commit with Git to upload the files to GitHub.If you go to GitHub and follow the repository, you will see that a GitHub Pages action will automatically be queued and executed.After this action works in GitHub, your blog will have updated information and the deployment will be complete.As we can see in the image below, in the orange rectangle, GitHub Pages action was executed:GitHub repository with the blog deploy files and GitHub Pages action executedTo access our blog, just enter in the browser: USERNAME.github.io, where mine is digo8875.github.ioOk, so far we have the application like the branch: 7-github-ioFinishingNow we have an approach to create a blog and start sharing our ideas and lessons.Thank you for the time we spent together, i hope you enjoyed our fun and that you can contribute your knowledge and experiences to others.Remember that is one of the many ways we can implement a blog. Feel free to make changes and improvments to your blog as you wish.See you next time!Links  Documentations          Jekyll      Chirpy      Chirpy - 7.2.4      Polyglot      Liquid      Markdown        Consulted Tutorials and Useful Links          Tutorial - Plyglot      Tutorial - Jekyll Blog Workflow      Tutorial - Chirpy Polyglot      Tutorial - Jekyll Deploy      Tutorial - Jekyll e Github Pages      Assets - Flags      "
  }
  
]

